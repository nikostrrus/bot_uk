import logging
from aiogram.dispatcher.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram import types
from loader import dp, bot, Dispatcher
from aiogram.dispatcher import FSMContext
import keybords.inline.choice_buttons as key
import keybords.inline.callback_datas as call_datas
from bd.sql import *
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import erp
from aiogram.dispatcher.filters.state import State, StatesGroup

class pictures(StatesGroup):
    photo = State()
    name = State()
    deportament = State()
    mission = State()

class datas(StatesGroup):
    text = State()
    name = State()
    deportament = State()
    mission = State()

class quests(StatesGroup):
    type = State()
    text = State()
    point = State()

class ed_point(StatesGroup):
    name = State()
    point = State()

# –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message_handler(Command('start'))
async def show_menu(message: Message):
    if message.chat.id == -1001905922253:
        await message.answer('–≠—Ç–æ –∞–¥–º–∏–Ω–∫–∞, —Ç—É—Ç –º–æ–∂–µ—Ç–µ –º–µ–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è(–¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å), —Ç–∞–∫ –∂–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—á–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', reply_markup=key.main_menu_keybord)
        return ''
    text = '''ü§ù –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –£–î –≤ –ú–ö–ñ–î! 
    –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –∫–æ–ø–∏ –±–∞–ª–ª—ã! 
    –û–±–º–µ–Ω–∏–≤–∞–π–±–∞–ª–ª—ã –Ω–∞ –ø—Ä–∏–∑—ã!'''
    await message.answer(text, reply_markup=key.menu_keyboard)
    response = await erp.get_id_erp(message.from_user.id)
    await create_profile(message.from_user.id, response[0], response[1])

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@dp.callback_query_handler(call_datas.menu_callback.filter(item_menu='next'))
async def helo_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    emp = (await sel_emploes(call.message.chat.id))[0][0]
    await call.message.edit_text(f'''–¢—ã –≤ –∫–æ–º–∞–Ω–¥–µ, {emp} üòé\n–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏–π
üíé1. –ó–∞ –∫–∞–∂–¥–æ–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 100 –±–∞–ª–ª–æ–≤. –í —Å—É–º–º–µ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 1200 –±–∞–ª–ª–æ–≤.

üíé2. –ó–∞ –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 300 –±–∞–ª–ª–æ–≤ –∑–∞ —Å—Ç–∞—Ä—à–µ–≥–æ –ø–æ –¥–æ–º—É –∏ 150 –±–∞–ª–ª–æ–≤ –∑–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ –∂–∏—Ç–µ–ª—è.

üíé3. –ó–∞ —Å–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 2000 –±–∞–ª–ª–æ–≤. ''', reply_markup=key.helo_keyboard)
    await call.answer()
    
# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–º–æ—â–∏
@dp.callback_query_handler(call_datas.helo_callback.filter(item_helo='helo'))
async def helo_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    await call.message.edit_text(f'''–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å–ø–∏—Å–æ–∫ –º–∏—Å—Å–∏–π –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å üíé
–í—ã–ø–æ–ª–Ω—è–π –∏—Ö –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ, –∞ –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–£–∑–Ω–∞—Ç—å –º–æ–∏ –±–∞–ª–ª—ã¬ª''', reply_markup=key.mission_keyboard)
    await call.answer()

# –ö–Ω–æ–ø–∫–∞ –º–∏—Å—Å–∏–∏

@dp.callback_query_handler(call_datas.mission_callback.filter(item_mission='miss'), state=None)
async def mission_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    missions = (await get_random_mission())
    await set_last_mission(call.message.chat.id, missions[0][0], call.message.message_id)
    if missions[0][1] == '2':
        await pictures.photo.set()
    else:
        await datas.text.set()
    await call.message.edit_text(str(missions[0][2]).replace('"',''), reply_markup=key.back_keyboard)
    await call.answer()

# –ö–Ω–æ–ø–∫–∞ –º–æ–∏ –±–∞–ª–ª—ã
@dp.callback_query_handler(call_datas.mission_callback.filter(item_mission='my_bolls'))
async def my_bolls_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    bal = (await check_point(call.message.chat.id))[0][0]
    await call.message.edit_text(f'–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å {bal} üíé', reply_markup=key.back_keyboard)
    await call.answer()

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@dp.callback_query_handler(call_datas.back_callback.filter(item_back='back'))
async def back_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    await call.message.edit_text(f'''–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å–ø–∏—Å–æ–∫ –º–∏—Å—Å–∏–π –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å üíé
–í—ã–ø–æ–ª–Ω—è–π –∏—Ö –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ, –∞ –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –±–∞–ª–ª—ã¬ª''', reply_markup=key.mission_keyboard)
    await call.answer()

# –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏—à–ª–∞ –Ω–µ —Ñ–æ—Ç–æ
@dp.message_handler(lambda message: not message.photo, state=pictures.photo)
async def check_photo(message: types.Message):
    await message.reply('–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ')

# –æ–±—Ä–æ–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—à–µ–¥–≥–µ–µ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=['photo'], state=pictures.photo)
async def load_photo(message: types.Message, state: FSMContext):
    person = (await get_users(message.chat.id))
    mission = (await get_mission(person[0][2]))
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
        data['name'] = person[0][0]
        data['deportament'] = person[0][1]
        data["mission"] = mission[0][2]
    async with state.proxy() as data:
        await bot.send_photo(-1001905922253, data['photo'], f'''–ö—Ç–æ –ø—Ä–∏—Å–ª–∞–ª: {data["name"]}
–ò–∑ –∫–∞–∫–æ–≥–æ –æ—Ç–¥–µ–ª–∞: {data["deportament"]}
–ù–∞ –∫–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {data["mission"]}
–û—á–∫–æ–≤ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ: {mission[0][3]}''', reply_markup=key.point_back_keyboard)
    await state.finish()
    await up_point(message.chat.id, mission[0][3])
    await message.delete()
    await bot.delete_message(message.from_user.id, person[0][3])
    await message.answer(f'–ö–ª–∞—Å—Å! –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–∏ {mission[0][3]} üíé', reply_markup=key.back_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ –≤ –Ω—É—Ç—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–µ–∂–∏—Ç —Ç–µ–∫—Å—Ç
@dp.message_handler(content_types=types.ContentType.ANY, state=datas.text)
async def load_text(message: types.Message, state: FSMContext):
    if message.content_type != 'text':
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
    else:
        person = (await get_users(message.chat.id))
        mission = (await get_mission(person[0][2]))
        async with state.proxy() as data:
            data['text'] = message.text
            data['name'] = person[0][0]
            data['deportament'] = person[0][1]
            data['mission'] = mission[0][2]
        async with state.proxy() as data:
            await bot.send_message(-1001905922253, f'–ö—Ç–æ –ø—Ä–∏—Å–ª–∞–ª: {data["name"]}\n–ò–∑ –∫–∞–∫–æ–≥–æ –æ—Ç–¥–µ–ª–∞: {data["deportament"]}\n–ù–∞ –∫–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {data["mission"]}\n–ù–∞–ø–∏—Å–∞–ª: {message.text}\n–û—á–∫–æ–≤ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ: {mission[0][3]}', reply_markup=key.point_back_keyboard)
        await state.finish()
        await up_point(message.chat.id, mission[0][3])
        await message.delete()
        await bot.delete_message(message.from_user.id, person[0][3])
        await message.answer(f'–ö–ª–∞—Å—Å! –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–∏ {mission[0][3]} üíé', reply_markup=key.back_keyboard)

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@dp.callback_query_handler(call_datas.main_back_callback.filter(item_main_bac='bac'), state=quests)
async def back_key(call: CallbackQuery, callback_data: dict, state: FSMContext):
    logging.info(f'call = {callback_data}')
    await call.message.edit_text('–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', reply_markup=key.all_mis_keyboard)
    await call.answer()
    await state.finish()

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@dp.callback_query_handler(call_datas.main_back_callbacks.filter(item_main_backs='backs'), state=ed_point)
async def back_key(call: CallbackQuery, callback_data: dict, state: FSMContext):
    logging.info(f'call = {callback_data}')
    await call.message.edit_text(f'–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å–ø–∏—Å–æ–∫ –º–∏—Å—Å–∏–π –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å üíé\n–í—ã–ø–æ–ª–Ω—è–π –∏—Ö –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ, –∞ –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –±–∞–ª–ª—ã¬ª', reply_markup=key.mission_keyboard)
    await call.answer()
    await state.finish()

# –í—ã—Ö–æ–¥ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.callback_query_handler(call_datas.back_callback.filter(item_back='back'), state='*')
async def back_key(call: CallbackQuery, callback_data: dict, state: FSMContext):
    logging.info(f'call = {callback_data}')
    await call.message.edit_text(f'–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å–ø–∏—Å–æ–∫ –º–∏—Å—Å–∏–π –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–ª—É—á–∏—à—å üíé\n–í—ã–ø–æ–ª–Ω—è–π –∏—Ö –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ, –∞ –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –±–∞–ª–ª—ã¬ª', reply_markup=key.mission_keyboard)
    await call.answer()
    await state.finish()

# –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏
@dp.callback_query_handler(call_datas.point_back_callback.filter(item_point_back='count'))
async def counts_point(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    if call.message.caption:
        mess = call.message.caption
        await call.message.edit_caption(mess)
    else:
        mess = call.message.text
        await call.message.edit_text(mess)
    await bot.answer_callback_query(callback_query_id=call.id, text='–ë–∞–ª—ã –∑–∞—Å—á–∏—Ç–∞–Ω—ã', show_alert=True)
    await call.answer()

# –£–±–∏—Ä–∞–µ–º –æ—á–∫–∏
@dp.callback_query_handler(call_datas.point_back_callback.filter(item_point_back='uncount'))
async def counts_point(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    if call.message.caption:
        mess = call.message.caption
        await call.message.edit_caption(mess)
    else:
        mess = call.message.text
        await call.message.edit_text(mess)
    await down_point(mess.split('\n')[0].split('–ö—Ç–æ –ø—Ä–∏—Å–ª–∞–ª: ')[1], mess.split('\n')[-1][-1])
    await bot.answer_callback_query(callback_query_id=call.id, text='–ë–∞–ª—ã –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω—ã', show_alert=True)
    await call.answer()

# –°–º–æ—Ç—Ä–∏–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query_handler(call_datas.main_menu_callback.filter(item_main_menu='all_mission'))
async def under_menu(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    await call.message.edit_text('–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', reply_markup=key.all_mis_keyboard)
    await call.answer()

# –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query_handler(call_datas.main_menu_callback.filter(item_main_menu='add'))
async def under_menu(call: CallbackQuery, callback_data: dict, state: FSMContext):
    logging.info(f'call = {callback_data}')
    await call.message.edit_text('''–¢—É—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω—É–∂–Ω–æ –≤–µ—Å—Ç–∏ 3 –ø—É–Ω–∫—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –≤–Ω–æ—Å–∞ –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑—É:
1. –í—ã–±—Ä–∞—Ç—å —á—Ç–æ —ç—Ç–æ –±—É–¥–µ—Ç —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–∏—Ñ—Ä–æ–π, —Ç–µ–∫—Å—Ç - 1, —Ñ–æ—Ç–æ - 2
2. –¢–µ–∫—Å—Ç –º–∏—Å—Å–∏–∏ –≤–∞–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å " –∫–∞–≤—ã—á–∫–∏
3. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
4. –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑—É, –æ—Ç–º–µ–Ω—è–µ—Ç –æ—Ç —Å–ª–æ–≤–∞ —Å–æ–≤—Å–µ–º\n
–£–¥–∞—á–∏))''', reply_markup=key.all_mis_back_keyboard)
    await quests.type.set()

# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É —Ç–∏–ø–∞ –º–∏—Å—Å–∏–∏ 
@dp.message_handler(lambda message: not message.text.isdigit() and 0 < int(message.text) < 3, state=quests.type)
async def check_photo(message: Message, state: FSMContext):
    await message.reply('–û—Ç–ø—Ä–∞–≤—å –≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ')

# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É —á–∏—Å–ª–∞
@dp.message_handler(state=quests.type)
async def load_type(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['type'] = message.text
    await message.answer('–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è')
    await quests.next()

# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ—Å—Å–∏–∏
@dp.message_handler(state=quests.text)
async def load_text(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
    await message.answer('–•–æ—Ä–æ—à–æ, –≤–µ–¥–∏—Ç–µ –∑–∞—á–∏—Å–ª—è–µ–º—ã–µ –æ—á–∫–∏ —á–∏—Å–ª–æ–º —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º')
    await quests.next()

# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –æ—á–∫–æ–≤ –∑–∞ –º–∏—Å—Å–∏—é
@dp.message_handler(lambda message: not message.text.isdigit(), state=quests.point)
async def check_photo(message: Message, state: FSMContext):
    await message.reply('–û—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ')

# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ—Å—Å–∏–∏
@dp.message_handler(state=quests.point)
async def load_point(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['point'] = int(message.text)
    async with state.proxy() as data:
        await add_mission(data['type'], data['text'], int(data['point']))
    await message.answer('–ú–∏—Å—Å—Å–∏—è –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    await state.finish()

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∏—Å—Å–∏–∏
@dp.callback_query_handler(call_datas.main_menu_callback.filter(item_main_menu='show_all'))
async def all_mission(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    all_mis = (await get_all_mission())
    for item in all_mis:
        await bot.send_message(-1001905922253, f'{item[0]}', reply_markup=key.delete_mission_keyboards)
    await call.answer()

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@dp.callback_query_handler(call_datas.main_menu_callback.filter(item_main_menu='back'))
async def back_key(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    await call.message.edit_text('–≠—Ç–æ –∞–¥–º–∏–Ω–∫–∞, —Ç—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –º–µ–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è(–¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å), —Ç–∞–∫ –∂–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—á–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', reply_markup=key.main_menu_keybord)
    await call.answer()

# —Ç–æ–ø 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@dp.callback_query_handler(call_datas.main_menu_callback.filter(item_main_menu='top_ten'))
async def top_ten(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    await unloading_from_database()
    await bot.send_document(-1001905922253, open('result.xlsx', 'rb'))
    await call.answer()

@dp.callback_query_handler(call_datas.main_menu_callback.filter(item_main_menu='phone'))
async def phone(call: CallbackQuery, callback_data: dict):
    logging.info(f'call = {callback_data}')
    await unloading_from_database_answer()
    await bot.send_document(-1001905922253, open('nomera.xlsx', 'rb'))
    await call.answer()    

# –ò–∑–º–µ–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤
@dp.callback_query_handler(call_datas.main_menu_callback.filter(item_main_menu='write_point'))
async def write_point(call: CallbackQuery, callback_data: dict):
    logging.info(f'call{callback_data}')
    await call.message.edit_text('''–¢—É—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
1—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—Å: –ü–æ–ª–Ω–æ–µ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ 
2—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—Å: –í–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –∏–∑–º–µ–Ω—è—Ç—Å—è –µ–≥–æ —Ç–µ–∫—É—â–∏–µ –æ—á–∫–∏''', reply_markup=key.all_mis_back_keyboards)
    await ed_point.name.set()
    await call.answer()
    
# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –µ–≥–æ –≤ –±–¥
@dp.message_handler(state=ed_point.name)
async def load_name_for_edit_point(message: Message, state: FSMContext):
    if (await search_employs(message.text)):
        async with state.proxy() as data:
            data['name'] = message.text
        await ed_point.next()
        await bot.send_message(-1001905922253, f'–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤')
    else:
        await message.answer('–í—ã –≤–µ–ª–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')

@dp.message_handler(lambda message: not message.text.isdigit(), state=ed_point.point)
async def check_photo(message: Message, state: FSMContext):
    await message.reply('–û—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ –æ—á–∫–æ–≤')

# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ—Å—Å–∏–∏
@dp.message_handler(state=ed_point.point)
async def load_point_for_edit_point(message: Message, state: FSMContext):
    async with state.proxy() as data:
        await edit_point(data['name'], message.text)
        await bot.send_message(-1001905922253, f'{data["name"]} –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–∏–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ {message.text}')
    await state.finish()

# –£–¥–∞–ª–µ–Ω–∏–µ –º–∏—Å—Å–∏–π
@dp.callback_query_handler(call_datas.delete_mission_callbacks.filter(item_delete='del'))
async def del_mis(call: CallbackQuery, callback_data: dict):
    logging.info(f'call{callback_data}')
    await del_mission(call.message.text)
    await call.message.edit_text(f'–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {call.message.text}')
    await call.answer()


